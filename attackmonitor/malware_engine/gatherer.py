from multiprocessing import Process
from feeders.structures import *
from parsers.parser import Parser
from parsers import parser_evtx_security, parser_evtx_system, parser_evtx_samba, \
    parser_evtx_schtasks, parser_evtx_powershell_main, parser_evtx_powershell_scriptblock, \
    parser_evtx_wmi_sysmon, parser_evtx_wmi_trace, parser_evtx_processes, parser_evtx_network, \
    parser_dirwatcher, parser_evtx_sysmon_others, parser_tshark_network
import time
from malware_engine.reporting import Reporting


class Gatherer(Process):
    def __init__(self, GATHERING_OPTIONS, MALWARE_MQ, CONTAINERS, PROCESS_TREE):
        super(Process, self).__init__()
        self.daemon = True
        self.GATHERING_OPTIONS = GATHERING_OPTIONS
        self.MALWARE_MQ = MALWARE_MQ
        self.CONTAINERS = CONTAINERS
        self.PROCESS_TREE = PROCESS_TREE
        self.prepare_capability_matrix()

    def prepare_capability_matrix(self):
        self.capability_matrix = {TYPE_LOG_EVENT: dict(),
                                  TYPE_FS_CHANGE: dict(),
                                  TYPE_NETWORK_PACKET: dict(),
                                  }

        for parserx in Parser.__subclasses__():
            parser_instance = parserx()
            parser_instance.init(CONTAINERS=self.CONTAINERS, GATHERING_OPTIONS=self.GATHERING_OPTIONS)
            parser_capab = parser_instance.get_capabilities()

            for source in parser_capab['feeders_list']:
                if not source in self.capability_matrix[parser_capab['type']].keys():
                    self.capability_matrix[parser_capab['type']][source] = list()

                if not parser_instance in self.capability_matrix[parser_capab['type']][source]:
                    self.capability_matrix[parser_capab['type']][source].append(parser_instance)

    def generate_report(self):
        print("self.generate_report()")
        r = Reporting(self.GATHERING_OPTIONS, self.CONTAINERS, self.PROCESS_TREE)
        r.generate()

    def run(self):
        i = 0

        while True:
            # GRAB FROM MALWARE MQ
            al = self.MALWARE_MQ.get()
            pass_mq = al.enhanced_data

            # BLOCK/DESTROY UNTIL GATHERING IS NOT ENABLED
            if not self.GATHERING_OPTIONS['enabled']:
                time.sleep(0.02)
                continue

            if self.GATHERING_OPTIONS['generate_report'] == True:
                self.generate_report()
                self.GATHERING_OPTIONS['generate_report'] = False

            # PARSER -
            if pass_mq.type in self.capability_matrix.keys():
                if pass_mq.source in self.capability_matrix[pass_mq.type].keys():
                    for parser in self.capability_matrix[pass_mq.type][pass_mq.source]:
                        result = parser.add_to_malware_report(pass_mq)

                        # NONE - Not supported by this parser, check next one
                        if result is None:
                            continue

                        # FALSE - Supported but ignore
                        elif result == False:
                            break

                        print(self.CONTAINERS['MALWARE_INTERESTING_PIDS'])

                else:
                    pass
                    # raise AssertionError
            else:
                pass
                # raise AssertionError

